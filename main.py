import praw  # for reddit API
import pickle  # for pickleRICK
from os.path import exists as does_file_exist  # for checking if file exist
try:
    import our_secrets
except ImportError:
    print('ha! you are missing the secretsssssss')
    exit(1)  # exit with errrcode 1

# make an instance from Reddit class defined in praw module
# username and password is for write access, rest is for read only
reddit = praw.Reddit(client_id=our_secrets.client_id,
                     client_secret=our_secrets.client_secret,
                     user_agent=our_secrets.user_agent,
                     username=our_secrets.username,
                     password=our_secrets.password)

# work with A subreddit
for submission in reddit.subreddit('documentaries').hot(limit=25):
    print(submission.title)

# TODO1 - print something interesting from the submission
# and remove the """ code """ to save space and make the code nice:
"""In [5]: dir(submission)
Out[5]:
['STR_FIELD',
 '__class__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattr__',
 '__getattribute__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 '_chunk',
 '_comments_by_id',
 '_fetch',
 '_fetched',
 '_flair',
 '_info_params',
 '_info_path',
 '_mod',
 '_reddit',
 '_reset_attributes',
 '_safely_add_arguments',
 '_url_parts',
 '_vote',
 'approved_at_utc',
 'approved_by',
 'archived',
 'author',
 'author_flair_background_color',
 'author_flair_css_class',
 'author_flair_richtext',
 'author_flair_template_id',
 'author_flair_text',
 'author_flair_text_color',
 'author_flair_type',
 'author_fullname',
 'banned_at_utc',
 'banned_by',
 'can_gild',
 'can_mod_post',
 'category',
 'clear_vote',
 'clicked',
 'comment_limit',
 'comment_sort',
 'comments',
 'content_categories',
 'contest_mode',
 'created',
 'created_utc',
 'crosspost',
 'delete',
 'disable_inbox_replies',
 'distinguished',
 'domain',
 'downs',
 'downvote',
 'duplicates',
 'edit',
 'edited',
 'enable_inbox_replies',
 'flair',
 'fullname',
 'gild',
 'gilded',
 'gildings',
 'hidden',
 'hide',
 'hide_score',
 'id',
 'id_from_url',
 'is_crosspostable',
 'is_meta',
 'is_original_content',
 'is_reddit_media_domain',
 'is_robot_indexable',
 'is_self',
 'is_video',
 'likes',
 'link_flair_background_color',
 'link_flair_css_class',
 'link_flair_richtext',
 'link_flair_template_id',
 'link_flair_text',
 'link_flair_text_color',
 'link_flair_type',
 'locked',
 'mark_visited',
 'media',
 'media_embed',
 'media_only',
 'mod',
 'mod_note',
 'mod_reason_by',
 'mod_reason_title',
 'mod_reports',
 'name',
 'no_follow',
 'num_comments',
 'num_crossposts',
 'num_reports',
 'over_18',
 'parent_whitelist_status',
 'parse',
 'permalink',
 'pinned',
 'post_hint',
 'preview',
 'pwls',
 'quarantine',
 'removal_reason',
 'reply',
 'report',
 'report_reasons',
 'save',
 'saved',
 'score',
 'secure_media',
 'secure_media_embed',
 'selftext',
 'selftext_html',
 'send_replies',
 'shortlink',
 'spoiler',
 'stickied',
 'subreddit',
 'subreddit_id',
 'subreddit_name_prefixed',
 'subreddit_subscribers',
 'subreddit_type',
 'suggested_sort',
 'thumbnail',
 'thumbnail_height',
 'thumbnail_width',
 'title',
 'unhide',
 'unsave',
 'ups',
 'upvote',
 'url',
 'user_reports',
 'view_count',
 'visited',
 'whitelist_status',
 'wls']"""

# TODO2 - save something interesting:
# this boring example saves just last used submission from previous loop
# and its url
# TIP use nested dictionary
# TODO3 (hard) - append to the database:
# OR
# TODO3 (easier) - overwrite the database:
data = {'key': submission,
        'theURL': submission.url}
if does_file_exist('database.db'):
    pass  # file exists, do nothing
    print('WARNING: \'databse.db\' exists, not writing anything')
else:
    with open('database.db', 'wb') as iowrap:  # write as bytes
        pickle.dump(data, iowrap)  # save the data to iowrap instance
